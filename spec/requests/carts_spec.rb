require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "Carts", type: :request do
  let!(:product) { Product.create!(code: 'GR1', name: 'Green Tea', base_price: 3.11) }

  describe "POST /cart/add" do
    it "adds one item to the current cart and responds with turbo stream" do
      # Request Turbo Stream format to exercise the turbo response branch
      post add_to_cart_path, params: { product_id: product.id }, as: :turbo_stream

      # Cart should be created and contain exactly one CartItem with quantity 1
      cart = Cart.find_by(session_id: session[:cart_session_id])
      expect(cart).to be_present
      item = cart.cart_items.find_by(product_id: product.id)
      expect(item&.quantity).to eq(1)

      # Turbo Stream should be the response content type
      expect(response.media_type).to eq('text/vnd.turbo-stream.html')
      expect(response).to have_http_status(:ok)
    end

    it "increments quantity when adding the same product again" do
      post add_to_cart_path, params: { product_id: product.id }, as: :turbo_stream
      post add_to_cart_path, params: { product_id: product.id }, as: :turbo_stream

      cart = Cart.find_by(session_id: session[:cart_session_id])
      item = cart.cart_items.find_by(product_id: product.id)
      expect(item&.quantity).to eq(2)
    end
  end

  describe "DELETE /cart/remove/:product_id" do
    it "decrements quantity or removes the item when reaching zero" do
      # Seed cart with quantity 2
      post add_to_cart_path, params: { product_id: product.id }, as: :turbo_stream
      post add_to_cart_path, params: { product_id: product.id }, as: :turbo_stream

      # First removal: quantity should go from 2 -> 1
      delete remove_from_cart_path(product_id: product.id), as: :turbo_stream
      cart = Cart.find_by(session_id: session[:cart_session_id])
      item = cart.cart_items.find_by(product_id: product.id)
      expect(item&.quantity).to eq(1)

      # Second removal: item should be destroyed
      delete remove_from_cart_path(product_id: product.id), as: :turbo_stream
      cart.reload
      expect(cart.cart_items.find_by(product_id: product.id)).to be_nil
    end
  end

  describe "DELETE /cart/clear" do
    it "removes all items from the cart" do
      post add_to_cart_path, params: { product_id: product.id }, as: :turbo_stream
      delete clear_cart_path, as: :turbo_stream

      cart = Cart.find_by(session_id: session[:cart_session_id])
      expect(cart.cart_items.count).to eq(0)
    end
  end

  describe "GET /cart" do
    it "renders cart show page" do
      get cart_path
      expect(response).to have_http_status(:ok)
      expect(response.body).to include("Cart")
    end
  end
end
